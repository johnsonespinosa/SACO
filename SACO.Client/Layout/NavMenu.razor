@inject IAuthService AuthService
@using SACO.Shared.Models
@using SACO.Shared.Services
@implements IDisposable

<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>

    @if (_currentUser?.IsAuthenticated == true)
    {
    <MudNavLink Href="/counter" Icon="@Icons.Material.Filled.Add">Counter</MudNavLink>
    <MudNavLink Href="/weather" Icon="@Icons.Material.Filled.WbSunny">Weather</MudNavLink>
    <MudNavLink Href="/api-test" Icon="@Icons.Material.Filled.Api">API Test</MudNavLink>

    <!-- Nuevo enlace para Circulaciones -->
    <MudNavLink Href="/circulations" Icon="@Icons.Material.Filled.Search">Búsqueda Circulaciones</MudNavLink>

    @if (_currentUser.Roles.Contains("Admin") || _currentUser.Roles.Contains("Analyst"))
    {
    <!-- Futuros enlaces para otras funcionalidades -->
    @* <MudNavLink Href="/dashboard" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink> *@
    }

    <MudDivider Class="my-2" />
    <MudText Typo="Typo.caption" Class="px-4 py-2 text-disabled">
        Hola, @_currentUser.FirstName
        <MudChip T="string" Color="Color.Primary" Size="Size.Small" Class="ml-2">
            @_currentUser.UserType
        </MudChip>
    </MudText>
    <MudNavLink Icon="@Icons.Material.Filled.Logout" OnClick="HandleLogout">
        Cerrar Sesión
    </MudNavLink>
    }
    else
    {
    <MudNavLink Href="/login" Icon="@Icons.Material.Filled.Login">Iniciar Sesión</MudNavLink>
    <MudNavLink Href="/register" Icon="@Icons.Material.Filled.PersonAdd">Registrarse</MudNavLink>
    }
</MudNavMenu>

@code {
    private CurrentUserResponse? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            _currentUser = await AuthService.GetCurrentUserAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _currentUser = new CurrentUserResponse { IsAuthenticated = false };
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        await LoadCurrentUser();
    }

    public void Dispose()
    {
        // Cleanup si es necesario
    }
}